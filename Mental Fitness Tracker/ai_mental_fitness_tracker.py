# -*- coding: utf-8 -*-
"""AI Mental Fitness Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13WKkL_PpFrkvL7qfVQrMQYleLYaY9vPM

Import required libraries
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np    #linear algebra
import pandas as pd   #data processing, CSV file I/O (e.g. pd.read_csv)

#Mount the Google Drive to Google Colab

from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns   #Seaborn is a data visualization library based on matplotlib
import matplotlib.pyplot as plt   #Matplotlib is a low level graph plotting library in python that serves as a visualization utility
import plotly.express as px   #allows you to create interactive plots with very little code

"""Exploratory Data Analysis

Load and prepare
"""

#prevalence-by-mental-and-substance-use-disorder.csv
df1 = pd.read_csv("/content/drive/MyDrive/Mental Fitness Tracker/prevalence-by-mental-and-substance-use-disorder _AI.csv")

#mental-and-substance-use-as-share-of-disease.csv
df2 = pd.read_csv("/content/drive/MyDrive/Mental Fitness Tracker/mental-and-substance-use-as-share-of-disease -AI.csv")

#prevalence-by-mental-and-substance-use-disorder.csv

df1.head()

#mental-and-substance-use-as-share-of-disease.csv

df2.head()

#Merging two datasets: #prevalence-by-mental-and-substance-use-disorder.csv, #mental-and-substance-use-as-share-of-disease.csv

data = pd.merge(df1, df2)
data.head(10)

"""**Data cleaning**"""

#Missing values in the dataset

data.isnull().sum()

#Drop the column

data.drop('Code', axis=1, inplace=True)

#View the data

data.head(10)

#size = row * column, shape = tuple of array dimensions(row, column)

data.size, data.shape

#Column set

data.set_axis(['Country', 'Year', 'Schizophrenia', 'Bipolar_disorder', 'Eating_disorder', 'Anxiety', 'drug_usage', 'depression', 'alcohol', 'mental_fitness'], axis = 'columns', inplace=True)

data.head(10)

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(), annot=True, cmap='Blues')    #Heatmap is defined as graphical representation of data using colors to visualize the value of matrix
plt.plot()

"""Takeaway Points:
*   Eating_disorder is positively correlated to mental_fitness and vice-verse as our eating choice affect our mental health


"""

sns.pairplot(data, corner=True)   #pairwise relationship in dataset
plt.show()

mean = data['mental_fitness'].mean()
mean

fig = px.pie(data, values='mental_fitness', names = 'Year')
fig.show()

fig = px.line(data, x="Year", y="mental_fitness", color='Country', markers=True, color_discrete_sequence=['red','blue'], template='plotly_dark')
fig.show()

df = data.copy()

df.head()

df.info()

#Transform non-numeric labels to numeric labels
from sklearn.preprocessing import LabelEncoder    #LabelEncoder used to normalize the labels
l=LabelEncoder()
for i in df.columns:
    if df[i].dtype == 'object':   #transform non-numerical labels (as long as they are hashable and comparable) to numerical labels
        df[i]=l.fit_transform(df[i])

df.shape

X = df.drop('mental_fitness',axis=1)
y = df['mental_fitness']

from sklearn.model_selection import train_test_split  #Use to split the original data into training data & testing data
xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=2)

print("xtrain: ", xtrain.shape)
print("xtest: ", xtest.shape)
print("ytest: ", ytest.shape)

"""# applying classification algorithm

# linear regression
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr = LinearRegression()
lr.fit(xtrain,ytrain)

# model evaluation for training set
ytrain_pred = lr.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))
r2 = r2_score(ytrain, ytrain_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
ytest_pred = lr.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
r2 = r2_score(ytest, ytest_pred)

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""# random forest regression"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain, ytrain)

# model evaluation for training set
ytrain_pred = rf.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))
r2 = r2_score(ytrain, ytrain_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
ytest_pred = rf.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
r2 = r2_score(ytest, ytest_pred)

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""# decission tree regression"""

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor(random_state=0)
dtr.fit(xtrain,ytrain)

#predicting the value

ytest_pred=dtr.predict(xtest)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for Decision Tree Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(ytest,ytest_pred),r2_score(ytest,ytest_pred)))

"""# svm regression"""

from sklearn.svm import SVR
svr=SVR()
svr.fit(xtrain,ytrain)

#predicting the value

ytest_pred=svr.predict(xtest)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for SVM Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(ytest,ytest_pred),r2_score(ytest,ytest_pred)))

"""# conclusion

Random Forest Regression works well on both train and test sets with r2 score of 0.99.
 As well as Decision Tree Regression also works well on both train and test set with r2 score of 0.98.
"""

np.random.seed(range(0,100))
print("Welcome to Mental Fitness Tracker!\nFill the detail to check your mental fitness!")
country=l.fit_transform([input('Enter Your country Name:')])
year=int(input("Enter the Year:"))
schi=(float(input("Enter your Schizophrenia rate in % (it not enter 0):")))*100
bipo_dis=(float(input("Enter your Bipolar disorder rate in % (it not enter 0):")))*100
eat_dis=(float(input("Enter your Eating disorder rate in % (it not enter 0):")))*100
anx=(float(input("Enter your Anxiety rate in % (it not enter 0):")))*100
drug_use=(float(input("Enter your Drug Usage rate in per year % (it not enter 0):")))*100
depr=(float(input("Enter your Depression rate in % (it not enter 0):")))*100
alch=(float(input("Enter your Alcohol Consuming rate per year in % (it not enter 0):")))*100

prediction=rf.predict([[country,year,schi,bipo_dis,eat_dis,anx,drug_use,depr,alch]])
print("Your Mental Fitness is {}%".format(prediction))
print("Bye...!")